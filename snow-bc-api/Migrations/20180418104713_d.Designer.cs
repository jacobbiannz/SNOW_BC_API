// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using snow_bc_api.src.data;
using System;

namespace snow_bc_api.Migrations
{
    [DbContext(typeof(BcApiDbContext))]
    [Migration("20180418104713_d")]
    partial class d
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("snow_bc_api.src.model.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ProvienceId");

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProvienceId");

                    b.ToTable("City","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.CityMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<Guid>("MonthId");

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("MonthId");

                    b.ToTable("CityMonth","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Country","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.FoodAndDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<Guid>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("FoodAndDrink","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<byte[]>("Data");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("IsMainImage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Path");

                    b.Property<int>("Rate");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Image","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Location","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.Month", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Month","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.Provience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CountryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provience","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.Sight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<string>("DeletedBy");

                    b.Property<Guid>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Sight","Production");
                });

            modelBuilder.Entity("snow_bc_api.src.model.City", b =>
                {
                    b.HasOne("snow_bc_api.src.model.Provience", "Provience")
                        .WithMany("AllCities")
                        .HasForeignKey("ProvienceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("snow_bc_api.src.model.CityMonth", b =>
                {
                    b.HasOne("snow_bc_api.src.model.City", "City")
                        .WithMany("BestMonths")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("snow_bc_api.src.model.Month", "Month")
                        .WithMany("TopCities")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("snow_bc_api.src.model.FoodAndDrink", b =>
                {
                    b.HasOne("snow_bc_api.src.model.Location", "Location")
                        .WithMany("FoodAndDrinks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("snow_bc_api.src.model.Image", b =>
                {
                    b.HasOne("snow_bc_api.src.model.City", "City")
                        .WithMany("Images")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("snow_bc_api.src.model.Location", b =>
                {
                    b.HasOne("snow_bc_api.src.model.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("snow_bc_api.src.model.Provience", b =>
                {
                    b.HasOne("snow_bc_api.src.model.Country", "Country")
                        .WithMany("AllProviences")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("snow_bc_api.src.model.Sight", b =>
                {
                    b.HasOne("snow_bc_api.src.model.Location", "Location")
                        .WithMany("Sights")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
